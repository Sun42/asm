/*
* void *memcpy (void *dest, const void *src, size_t n) ;
*/

#include		"asm.h"

	/* %esi %edi*/
/* %eax, %ecx, %edx ready for use*/

GLOBAL_FUNC(mymemcpy)

	pushl	%ebp		/* prologue*/
	movl	%esp, %ebp	/* prologue*/

	pushl	%ebx		/* ebx not rdy for use*/
	pushl	%esi		/* ebx not rdy for use*/
	movl	8(%ebp), %ebx	/* ebx = dest */
	movl	12(%ebp), %ex	/* ecx = src*/
	movl	16(%ebp), %esi	/* esi = n*/

boucle:
	cmpl	$0, %esi	/* if n == 0*/
	je	fin		/* goto fin */
	xorl	%eax, %eax
	movb	(%ecx), %al	/* eax = *src */
	movb	%al, (%ebx)	/* *dest = *src*/
	decl	%esi		/* n-- */
	incl	%ebx		/* dest++*/
	incl	%ecx		/* src++*/
	jmp	boucle

fin:
	movl	8(%ebp), %eax
	popl	%esi
	popl	%ebx		/* restaure ebx*/


	leave
	ret

FUNC_END(mymemcpy)


GLOBAL_FUNC(mymemcpy2)
	pushl	%ebp			// prologue
	movl	%esp, %ebp		// prologue

	pushl	%ebx
	movl	8(%ebp), %ebx		// ebx = dest
	movl	12(%ebp), %ecx		// ecx = src
	movl	16(%ebp), %edx		// edx = len

memcpy_loop:
	cmpl	$0, %edx		// if (len == 0)
	je	end
	xorl	%eax, %eax
	movb	(%ecx), %al		// recopie du premier octet de src...
	movb	%al, (%ebx)		// ... dans dest
	incl	%ebx			// dest++
	incl	%ecx			// src++
	decl	%edx			// len--
	jmp	memcpy_loop
end:
	movl	8(%ebp), %eax		// returns dest
	popl	%ebx
	leave				// epilogue
	ret				// epilogue (pop eip)
FUNC_END(mymemcpy2)