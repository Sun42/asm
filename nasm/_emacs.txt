;; M-x name-last-kbd-macro
;; M-x insert-kbd-macro
;; (global-set-key (kbd "C-c a") 'my-macro)

(fset 'loli
   [?\M-! ?b ?u ?i ?l ?d ?. ?b ?a ?t return ?\M-! ?h ?e ?l ?l ?o ?. ?e ?x ?e return ?\C-x kp-1])
(global-set-key (kbd "<f7>") 'loli)
(fset 'my_indent
   [?\M-x ?s ?e ?t kp-subtract ?v ?a ?r ?i tab return ?t ?a ?b kp-subtract ?a ?l ?w ?a ?y ?s kp-subtract ?i ?n ?d ?e ?n ?t return ?t return])
(global-set-key (kbd "<f8>") 'my_indent)

;; ajout au PATH-Emacs
(setq load-path (cons "~/.emacs.d/" load-path))

;; (load-file "~/.emacs.d/cedet-1.0pre6/common/cedet.el")
;; (global-ede-mode 1)                      ; Enable the Project management system
;; (semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion 
;; (global-srecode-minor-mode 1)            ; Enable template insertion menu

;; (add-to-list 'load-path "~/.emacs.d/company")
;; (autoload 'company-mode "company" nil t)

(setq compile-command "make")
(setq show-trailing-whitespace t)
(setq-default show-trailing-whitespace t)

(font-lock-mode t)
(global-font-lock-mode t)
(setq font-lock-maximum-decoration 5)

(set-face-foreground   'font-lock-string-face "Yellow")
(set-face-foreground   'font-lock-comment-face	"OrangeRed")
(set-face-foreground   'font-lock-keyword-face	"Cyan")
(set-face-bold-p       'font-lock-keyword-face t)
(set-face-foreground   'font-lock-type-face	"Wheat")
; (set-face-underline-p  'font-lock-type-face t)
(set-face-foreground   'font-lock-function-name-face	"Blue")
(set-face-bold-p       'font-lock-function-name-face t)
(set-face-foreground   'font-lock-variable-name-face	"Green")
;; reference
; (set-face-foreground   'font-lock-constant-face "White")
; (set-face-background   'font-lock-constant-face "BlueViolet")
(set-foreground-color "white")
(set-background-color "black")

;line higlight
(global-hl-line-mode t)
(custom-set-faces '(highlight ((t (:weight bold)))))

(set-terminal-coding-system 'latin-1)
(set-language-environment 'latin-1)
;(set-keyboard-coding-system 'latin-1)

;; Bip a la con
; (setq visible-bell t)
;; Affiche le nom du fichier en haut de la fenetre.
(setq frame-title-format "%b")
;; Affiche le lien entre les parantheses.
(show-paren-mode t)
;; colorise la region entre les deux marques
(transient-mark-mode t)
;; non clignotant.
(setq blink-cursor nil)
;; Indentation par defaut
(setq c-indentation-style "sh-mode")

;; Affiche le nombre de colonnes.
(column-number-mode t)
;; Pas de barre de menu.
(menu-bar-mode nil)
;; Pas de barre d'outils.
; (tool-bar-mode nil)

; affichage de l'heure dans la modeline
(display-time)

;; when moving the cursor to the bottom/top of screen, scroll up/down 2 lines
(setq scroll-step 5)
;; when moving page up/down, keep 1 line in common
(setq next-screen-context-lines 5)

;; Une touche DEL fonctionnelle
(and
 window-system
 (functionp 'normal-erase-is-backspace-mode)
 (normal-erase-is-backspace-mode nil))

;; mode Python
(autoload 'python-mode "python-mode" "Python editing mode." t)
;; mode PHP
(autoload 'php-mode "php-mode" "PHP editing mode." t)

;;(load "ibuffer.el")
;;(global-set-key "\C-x\C-b" 'ibuffer)

;;(load "kill-ring-rotate.el")
;;(global-set-key "\C-x\C-k" 'kill-ring-rotate)

;; (load "shell-toggle-patched.el")
;; (global-set-key "\C-x\C-t" 'shell-toggle)

(global-set-key "\C-c\C-g" 'goto-line)
(global-set-key "\C-c\C-c" 'compile)
(global-set-key [home]    'beginning-of-line)
(global-set-key [end]     'end-of-line)

;; Jeux de claviers
(setq default-input-method 'french-postfix)
(global-set-key "\C-x\C-g" 'toggle-input-method)
(add-hook 'message-mode-hook 'toggle-input-method)

(defun moy-prefered-window-configuration ()
  (interactive)
  (shell-toggle 'nil)
  (shell-toggle 'nil)
  (delete-other-windows)
  (split-window-horizontally)
  (other-window 1)
  (split-window-vertically 24)
  (split-window-vertically)
  (switch-to-buffer "*compilation*")
  (other-window 1)
  (switch-to-buffer "*ansi-term*")
  (other-window 1)
  (ff-find-other-file)
  (other-window -3)
  )

(defun moy-compile-window-configuration ()
  (interactive)
  (shell-toggle 'nil)
  (shell-toggle 'nil)
  (delete-other-windows)
  (split-window-vertically 12)
  (switch-to-buffer "*compilation*")
  (other-window 1)
  )

(defun moy-gnus-window ()
  (interactive)
  (delete-other-windows)
  (switch-to-buffer "*Group*")
  )

(global-set-key [C-f5] 'moy-prefered-window-configuration)
(global-set-key [C-f6] 'moy-compile-window-configuration)
(global-set-key [C-f7] 'moy-gnus-window)

; (server-start)

;; Truc pour emacs display...

; (setq browse-url-generic-program "firefox")
;; Le curseur reste toujours en pos quand on scroll
; (setq scroll-preserve-screen-position t)
; (setq cursor-in-non-selected-windows t)
;; Copie a l'endroit du curseur, pas de la souris
; (setq mouse-yank-at-point t)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector ["black" "red" "green" "yellow" "lightslateblue" "magenta" "cyan" "white"])
 '(canlock-password "e722586516e941d6dfddd0e88b7623046bec29aa")
 '(compilation-scroll-output t)
 '(compile-auto-highlight 5)
 '(executable-chmod 755)
 '(gnus-buttonized-mime-types (quote (".*/.*")))
 '(gnus-show-threads t)
 '(gnus-thread-hide-subtree t)
 '(grep-command "grep -i -n -e "))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(cursor ((t (:background "tan"))))
 '(gnus-header-content-face ((t (:foreground "green3"))) t)
 '(gnus-header-from-face ((((class color) (background dark)) (:foreground "SeaGreen3"))) t)
 '(gnus-header-name-face ((((class color) (background dark)) (:foreground "Green"))) t)
 '(gnus-header-subject-face ((((class color) (background dark)) (:foreground "spring green"))) t)
 '(info-xref ((t (:foreground "magenta" :weight bold))))
 '(message-header-name-face ((((class color) (background dark)) (:inherit gnus-header-name-face))) t)
 '(message-header-other-face ((((class color) (background dark)) (:inherit gnus-header-content-face))) t)
 '(mode-line ((((type x w32 mac) (class color)) (:background "slateblue" :foreground "black" :box (:line-width -1 :style released-button)))))
 '(mouse ((t (:background "white"))))
 '(show-paren-match ((((class color)) (:background "DarkSlateBlue"))))
 '(tooltip ((((class color)) (:background "lightyellow" :foreground "black")))))

;;(require 'zone)
;;(zone-when-idle 1)
;(if (file-exists-p "~/.myemacs")
;    (load-file "~/.myemacs"))


;; (add-hook 'c-mode-common-hook
;; 	  (lambda ()
;; 	    (font-lock-add-keywords nil
;; 				    '(("\<\(FIXME\|TODO\|BUG\|XXX\):" 1 font-lock-warning-face t)))))

(setq fixme-modes '(erlang-mode java-mode c-mode emacs-lisp-mode scheme-mode))
 (make-face 'font-lock-fixme-face)
 (mapc (lambda (mode)
          (font-lock-add-keywords
             mode
               '(("\<\(XXX\)" 1 'font-lock-fixme-face t))))
       fixme-modes)
 (modify-face 'font-lock-fixme-face "Yellow" "Green" nil t nil t nil nil)
