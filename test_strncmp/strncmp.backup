/*
* int strncmp(const char *s1, const char *s2, size_t n);
*/

#include		"asm.h"

/*%esi %edi*/

GLOBAL_FUNC(mystrncmp)
	pushl	%ebp		/* prologue*/
	movl	%esp, %ebp	/* prologue*/

	xorl	%esi, %esi	/* ecx = 0*/
	movl	$0, %esi
	movl	8(%esp), %ebx	/* ebx = s1 */
	movl	12(%esp), %ecx	/* ecx = s2*/
	movl	16(%esp), %edi	/* edi = n*/
	cmpl	$0, %edi	/* if n == 0 return 0*/
	je	fineq
boucle:
	incl	%esi
	movb	(%ebx), %dl	// dl = *s1
	cmpb	%dl, (%ecx)
	je	next		// if *s2 == *s1 goto next
	jg	finneg		// if *s2 > *s1 goto fin negative
	jb	finpos		// if *s2 > *s1 goto fin positive

next:
	cmpl	%esi, %edi
	je	fineq		// if cpt == n goto return 0
	cmpb	$0, (%ecx)
	je	fineq		//if (*s2 == '\0') || (*s1 == '\0') => return 0
	incl	%ebx		// s1++
	incl	%ecx		//s2++
	jmp	boucle


fineq:
	movl	$0, %eax
	jmp	fin

finpos:
	//movl	$1, %eax
	xorl	%eax, %eax
	subb	(%ecx), %dl
	movb	%dl, %al
	jmp	fin

finneg:

	//movl	$-1, %eax
	xorl	%eax, %eax
	subb	(%ecx), %dl
	movsbl	%dl, %eax
//	movl	%dl, %al
//	notl	%eax
//	addl	$1, %eax
	jmp	fin

fin :

	leave
	ret

FUNC_END(mystrncmp)
